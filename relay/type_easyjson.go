// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package relay

import (
	tls "crypto/tls"
	x509 "crypto/x509"
	pkix "crypto/x509/pkix"
	asn1 "encoding/asn1"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	big "math/big"
	multipart "mime/multipart"
	net "net"
	http "net/http"
	textproto "net/textproto"
	url "net/url"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBc289ab0DecodeGithubComStitchculaClickhouseRelayRelay(in *jlexer.Lexer, out *BodyRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Method":
			out.Method = string(in.String())
		case "URL":
			if in.IsNull() {
				in.Skip()
				out.URL = nil
			} else {
				if out.URL == nil {
					out.URL = new(url.URL)
				}
				easyjsonBc289ab0DecodeNetUrl(in, out.URL)
			}
		case "Proto":
			out.Proto = string(in.String())
		case "ProtoMajor":
			out.ProtoMajor = int(in.Int())
		case "ProtoMinor":
			out.ProtoMinor = int(in.Int())
		case "Header":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Header = make(http.Header)
				} else {
					out.Header = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 []string
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						in.Delim('[')
						if v1 == nil {
							if !in.IsDelim(']') {
								v1 = make([]string, 0, 4)
							} else {
								v1 = []string{}
							}
						} else {
							v1 = (v1)[:0]
						}
						for !in.IsDelim(']') {
							var v2 string
							v2 = string(in.String())
							v1 = append(v1, v2)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Header)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ContentLength":
			out.ContentLength = int64(in.Int64())
		case "TransferEncoding":
			if in.IsNull() {
				in.Skip()
				out.TransferEncoding = nil
			} else {
				in.Delim('[')
				if out.TransferEncoding == nil {
					if !in.IsDelim(']') {
						out.TransferEncoding = make([]string, 0, 4)
					} else {
						out.TransferEncoding = []string{}
					}
				} else {
					out.TransferEncoding = (out.TransferEncoding)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.TransferEncoding = append(out.TransferEncoding, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Close":
			out.Close = bool(in.Bool())
		case "Host":
			out.Host = string(in.String())
		case "Form":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Form = make(url.Values)
				} else {
					out.Form = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 []string
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						in.Delim('[')
						if v4 == nil {
							if !in.IsDelim(']') {
								v4 = make([]string, 0, 4)
							} else {
								v4 = []string{}
							}
						} else {
							v4 = (v4)[:0]
						}
						for !in.IsDelim(']') {
							var v5 string
							v5 = string(in.String())
							v4 = append(v4, v5)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Form)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "PostForm":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.PostForm = make(url.Values)
				} else {
					out.PostForm = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 []string
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						in.Delim('[')
						if v6 == nil {
							if !in.IsDelim(']') {
								v6 = make([]string, 0, 4)
							} else {
								v6 = []string{}
							}
						} else {
							v6 = (v6)[:0]
						}
						for !in.IsDelim(']') {
							var v7 string
							v7 = string(in.String())
							v6 = append(v6, v7)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.PostForm)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "MultipartForm":
			if in.IsNull() {
				in.Skip()
				out.MultipartForm = nil
			} else {
				if out.MultipartForm == nil {
					out.MultipartForm = new(multipart.Form)
				}
				easyjsonBc289ab0DecodeMimeMultipart(in, out.MultipartForm)
			}
		case "Trailer":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Trailer = make(http.Header)
				} else {
					out.Trailer = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 []string
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						in.Delim('[')
						if v8 == nil {
							if !in.IsDelim(']') {
								v8 = make([]string, 0, 4)
							} else {
								v8 = []string{}
							}
						} else {
							v8 = (v8)[:0]
						}
						for !in.IsDelim(']') {
							var v9 string
							v9 = string(in.String())
							v8 = append(v8, v9)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Trailer)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "RemoteAddr":
			out.RemoteAddr = string(in.String())
		case "RequestURI":
			out.RequestURI = string(in.String())
		case "TLS":
			if in.IsNull() {
				in.Skip()
				out.TLS = nil
			} else {
				if out.TLS == nil {
					out.TLS = new(tls.ConnectionState)
				}
				easyjsonBc289ab0DecodeCryptoTls(in, out.TLS)
			}
		case "Payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeGithubComStitchculaClickhouseRelayRelay(out *jwriter.Writer, in BodyRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Method\":"
		out.RawString(prefix[1:])
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"URL\":"
		out.RawString(prefix)
		if in.URL == nil {
			out.RawString("null")
		} else {
			easyjsonBc289ab0EncodeNetUrl(out, *in.URL)
		}
	}
	{
		const prefix string = ",\"Proto\":"
		out.RawString(prefix)
		out.String(string(in.Proto))
	}
	{
		const prefix string = ",\"ProtoMajor\":"
		out.RawString(prefix)
		out.Int(int(in.ProtoMajor))
	}
	{
		const prefix string = ",\"ProtoMinor\":"
		out.RawString(prefix)
		out.Int(int(in.ProtoMinor))
	}
	{
		const prefix string = ",\"Header\":"
		out.RawString(prefix)
		if in.Header == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.Header {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				if v11Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v12, v13 := range v11Value {
						if v12 > 0 {
							out.RawByte(',')
						}
						out.String(string(v13))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"ContentLength\":"
		out.RawString(prefix)
		out.Int64(int64(in.ContentLength))
	}
	{
		const prefix string = ",\"TransferEncoding\":"
		out.RawString(prefix)
		if in.TransferEncoding == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.TransferEncoding {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Close\":"
		out.RawString(prefix)
		out.Bool(bool(in.Close))
	}
	{
		const prefix string = ",\"Host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"Form\":"
		out.RawString(prefix)
		if in.Form == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v16First := true
			for v16Name, v16Value := range in.Form {
				if v16First {
					v16First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v16Name))
				out.RawByte(':')
				if v16Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v17, v18 := range v16Value {
						if v17 > 0 {
							out.RawByte(',')
						}
						out.String(string(v18))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"PostForm\":"
		out.RawString(prefix)
		if in.PostForm == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v19First := true
			for v19Name, v19Value := range in.PostForm {
				if v19First {
					v19First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v19Name))
				out.RawByte(':')
				if v19Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v20, v21 := range v19Value {
						if v20 > 0 {
							out.RawByte(',')
						}
						out.String(string(v21))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"MultipartForm\":"
		out.RawString(prefix)
		if in.MultipartForm == nil {
			out.RawString("null")
		} else {
			easyjsonBc289ab0EncodeMimeMultipart(out, *in.MultipartForm)
		}
	}
	{
		const prefix string = ",\"Trailer\":"
		out.RawString(prefix)
		if in.Trailer == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v22First := true
			for v22Name, v22Value := range in.Trailer {
				if v22First {
					v22First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v22Name))
				out.RawByte(':')
				if v22Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v23, v24 := range v22Value {
						if v23 > 0 {
							out.RawByte(',')
						}
						out.String(string(v24))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"RemoteAddr\":"
		out.RawString(prefix)
		out.String(string(in.RemoteAddr))
	}
	{
		const prefix string = ",\"RequestURI\":"
		out.RawString(prefix)
		out.String(string(in.RequestURI))
	}
	{
		const prefix string = ",\"TLS\":"
		out.RawString(prefix)
		if in.TLS == nil {
			out.RawString("null")
		} else {
			easyjsonBc289ab0EncodeCryptoTls(out, *in.TLS)
		}
	}
	{
		const prefix string = ",\"Payload\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Payload)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BodyRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc289ab0EncodeGithubComStitchculaClickhouseRelayRelay(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BodyRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc289ab0EncodeGithubComStitchculaClickhouseRelayRelay(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BodyRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc289ab0DecodeGithubComStitchculaClickhouseRelayRelay(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BodyRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc289ab0DecodeGithubComStitchculaClickhouseRelayRelay(l, v)
}
func easyjsonBc289ab0DecodeCryptoTls(in *jlexer.Lexer, out *tls.ConnectionState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Version":
			out.Version = uint16(in.Uint16())
		case "HandshakeComplete":
			out.HandshakeComplete = bool(in.Bool())
		case "DidResume":
			out.DidResume = bool(in.Bool())
		case "CipherSuite":
			out.CipherSuite = uint16(in.Uint16())
		case "NegotiatedProtocol":
			out.NegotiatedProtocol = string(in.String())
		case "NegotiatedProtocolIsMutual":
			out.NegotiatedProtocolIsMutual = bool(in.Bool())
		case "ServerName":
			out.ServerName = string(in.String())
		case "PeerCertificates":
			if in.IsNull() {
				in.Skip()
				out.PeerCertificates = nil
			} else {
				in.Delim('[')
				if out.PeerCertificates == nil {
					if !in.IsDelim(']') {
						out.PeerCertificates = make([]*x509.Certificate, 0, 8)
					} else {
						out.PeerCertificates = []*x509.Certificate{}
					}
				} else {
					out.PeerCertificates = (out.PeerCertificates)[:0]
				}
				for !in.IsDelim(']') {
					var v27 *x509.Certificate
					if in.IsNull() {
						in.Skip()
						v27 = nil
					} else {
						if v27 == nil {
							v27 = new(x509.Certificate)
						}
						easyjsonBc289ab0DecodeCryptoX509(in, v27)
					}
					out.PeerCertificates = append(out.PeerCertificates, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "VerifiedChains":
			if in.IsNull() {
				in.Skip()
				out.VerifiedChains = nil
			} else {
				in.Delim('[')
				if out.VerifiedChains == nil {
					if !in.IsDelim(']') {
						out.VerifiedChains = make([][]*x509.Certificate, 0, 2)
					} else {
						out.VerifiedChains = [][]*x509.Certificate{}
					}
				} else {
					out.VerifiedChains = (out.VerifiedChains)[:0]
				}
				for !in.IsDelim(']') {
					var v28 []*x509.Certificate
					if in.IsNull() {
						in.Skip()
						v28 = nil
					} else {
						in.Delim('[')
						if v28 == nil {
							if !in.IsDelim(']') {
								v28 = make([]*x509.Certificate, 0, 8)
							} else {
								v28 = []*x509.Certificate{}
							}
						} else {
							v28 = (v28)[:0]
						}
						for !in.IsDelim(']') {
							var v29 *x509.Certificate
							if in.IsNull() {
								in.Skip()
								v29 = nil
							} else {
								if v29 == nil {
									v29 = new(x509.Certificate)
								}
								easyjsonBc289ab0DecodeCryptoX509(in, v29)
							}
							v28 = append(v28, v29)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.VerifiedChains = append(out.VerifiedChains, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SignedCertificateTimestamps":
			if in.IsNull() {
				in.Skip()
				out.SignedCertificateTimestamps = nil
			} else {
				in.Delim('[')
				if out.SignedCertificateTimestamps == nil {
					if !in.IsDelim(']') {
						out.SignedCertificateTimestamps = make([][]uint8, 0, 2)
					} else {
						out.SignedCertificateTimestamps = [][]uint8{}
					}
				} else {
					out.SignedCertificateTimestamps = (out.SignedCertificateTimestamps)[:0]
				}
				for !in.IsDelim(']') {
					var v30 []uint8
					if in.IsNull() {
						in.Skip()
						v30 = nil
					} else {
						v30 = in.Bytes()
					}
					out.SignedCertificateTimestamps = append(out.SignedCertificateTimestamps, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "OCSPResponse":
			if in.IsNull() {
				in.Skip()
				out.OCSPResponse = nil
			} else {
				out.OCSPResponse = in.Bytes()
			}
		case "TLSUnique":
			if in.IsNull() {
				in.Skip()
				out.TLSUnique = nil
			} else {
				out.TLSUnique = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeCryptoTls(out *jwriter.Writer, in tls.ConnectionState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Version\":"
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.Version))
	}
	{
		const prefix string = ",\"HandshakeComplete\":"
		out.RawString(prefix)
		out.Bool(bool(in.HandshakeComplete))
	}
	{
		const prefix string = ",\"DidResume\":"
		out.RawString(prefix)
		out.Bool(bool(in.DidResume))
	}
	{
		const prefix string = ",\"CipherSuite\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.CipherSuite))
	}
	{
		const prefix string = ",\"NegotiatedProtocol\":"
		out.RawString(prefix)
		out.String(string(in.NegotiatedProtocol))
	}
	{
		const prefix string = ",\"NegotiatedProtocolIsMutual\":"
		out.RawString(prefix)
		out.Bool(bool(in.NegotiatedProtocolIsMutual))
	}
	{
		const prefix string = ",\"ServerName\":"
		out.RawString(prefix)
		out.String(string(in.ServerName))
	}
	{
		const prefix string = ",\"PeerCertificates\":"
		out.RawString(prefix)
		if in.PeerCertificates == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.PeerCertificates {
				if v34 > 0 {
					out.RawByte(',')
				}
				if v35 == nil {
					out.RawString("null")
				} else {
					easyjsonBc289ab0EncodeCryptoX509(out, *v35)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"VerifiedChains\":"
		out.RawString(prefix)
		if in.VerifiedChains == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.VerifiedChains {
				if v36 > 0 {
					out.RawByte(',')
				}
				if v37 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v38, v39 := range v37 {
						if v38 > 0 {
							out.RawByte(',')
						}
						if v39 == nil {
							out.RawString("null")
						} else {
							easyjsonBc289ab0EncodeCryptoX509(out, *v39)
						}
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SignedCertificateTimestamps\":"
		out.RawString(prefix)
		if in.SignedCertificateTimestamps == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v40, v41 := range in.SignedCertificateTimestamps {
				if v40 > 0 {
					out.RawByte(',')
				}
				out.Base64Bytes(v41)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"OCSPResponse\":"
		out.RawString(prefix)
		out.Base64Bytes(in.OCSPResponse)
	}
	{
		const prefix string = ",\"TLSUnique\":"
		out.RawString(prefix)
		out.Base64Bytes(in.TLSUnique)
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeCryptoX509(in *jlexer.Lexer, out *x509.Certificate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Raw":
			if in.IsNull() {
				in.Skip()
				out.Raw = nil
			} else {
				out.Raw = in.Bytes()
			}
		case "RawTBSCertificate":
			if in.IsNull() {
				in.Skip()
				out.RawTBSCertificate = nil
			} else {
				out.RawTBSCertificate = in.Bytes()
			}
		case "RawSubjectPublicKeyInfo":
			if in.IsNull() {
				in.Skip()
				out.RawSubjectPublicKeyInfo = nil
			} else {
				out.RawSubjectPublicKeyInfo = in.Bytes()
			}
		case "RawSubject":
			if in.IsNull() {
				in.Skip()
				out.RawSubject = nil
			} else {
				out.RawSubject = in.Bytes()
			}
		case "RawIssuer":
			if in.IsNull() {
				in.Skip()
				out.RawIssuer = nil
			} else {
				out.RawIssuer = in.Bytes()
			}
		case "Signature":
			if in.IsNull() {
				in.Skip()
				out.Signature = nil
			} else {
				out.Signature = in.Bytes()
			}
		case "SignatureAlgorithm":
			out.SignatureAlgorithm = x509.SignatureAlgorithm(in.Int())
		case "PublicKeyAlgorithm":
			out.PublicKeyAlgorithm = x509.PublicKeyAlgorithm(in.Int())
		case "PublicKey":
			if m, ok := out.PublicKey.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.PublicKey.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.PublicKey = in.Interface()
			}
		case "Version":
			out.Version = int(in.Int())
		case "SerialNumber":
			if in.IsNull() {
				in.Skip()
				out.SerialNumber = nil
			} else {
				if out.SerialNumber == nil {
					out.SerialNumber = new(big.Int)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.SerialNumber).UnmarshalJSON(data))
				}
			}
		case "Issuer":
			easyjsonBc289ab0DecodeCryptoX509Pkix(in, &out.Issuer)
		case "Subject":
			easyjsonBc289ab0DecodeCryptoX509Pkix(in, &out.Subject)
		case "NotBefore":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.NotBefore).UnmarshalJSON(data))
			}
		case "NotAfter":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.NotAfter).UnmarshalJSON(data))
			}
		case "KeyUsage":
			out.KeyUsage = x509.KeyUsage(in.Int())
		case "Extensions":
			if in.IsNull() {
				in.Skip()
				out.Extensions = nil
			} else {
				in.Delim('[')
				if out.Extensions == nil {
					if !in.IsDelim(']') {
						out.Extensions = make([]pkix.Extension, 0, 1)
					} else {
						out.Extensions = []pkix.Extension{}
					}
				} else {
					out.Extensions = (out.Extensions)[:0]
				}
				for !in.IsDelim(']') {
					var v54 pkix.Extension
					easyjsonBc289ab0DecodeCryptoX509Pkix1(in, &v54)
					out.Extensions = append(out.Extensions, v54)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExtraExtensions":
			if in.IsNull() {
				in.Skip()
				out.ExtraExtensions = nil
			} else {
				in.Delim('[')
				if out.ExtraExtensions == nil {
					if !in.IsDelim(']') {
						out.ExtraExtensions = make([]pkix.Extension, 0, 1)
					} else {
						out.ExtraExtensions = []pkix.Extension{}
					}
				} else {
					out.ExtraExtensions = (out.ExtraExtensions)[:0]
				}
				for !in.IsDelim(']') {
					var v55 pkix.Extension
					easyjsonBc289ab0DecodeCryptoX509Pkix1(in, &v55)
					out.ExtraExtensions = append(out.ExtraExtensions, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "UnhandledCriticalExtensions":
			if in.IsNull() {
				in.Skip()
				out.UnhandledCriticalExtensions = nil
			} else {
				in.Delim('[')
				if out.UnhandledCriticalExtensions == nil {
					if !in.IsDelim(']') {
						out.UnhandledCriticalExtensions = make([]asn1.ObjectIdentifier, 0, 2)
					} else {
						out.UnhandledCriticalExtensions = []asn1.ObjectIdentifier{}
					}
				} else {
					out.UnhandledCriticalExtensions = (out.UnhandledCriticalExtensions)[:0]
				}
				for !in.IsDelim(']') {
					var v56 asn1.ObjectIdentifier
					if in.IsNull() {
						in.Skip()
						v56 = nil
					} else {
						in.Delim('[')
						if v56 == nil {
							if !in.IsDelim(']') {
								v56 = make(asn1.ObjectIdentifier, 0, 8)
							} else {
								v56 = asn1.ObjectIdentifier{}
							}
						} else {
							v56 = (v56)[:0]
						}
						for !in.IsDelim(']') {
							var v57 int
							v57 = int(in.Int())
							v56 = append(v56, v57)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.UnhandledCriticalExtensions = append(out.UnhandledCriticalExtensions, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExtKeyUsage":
			if in.IsNull() {
				in.Skip()
				out.ExtKeyUsage = nil
			} else {
				in.Delim('[')
				if out.ExtKeyUsage == nil {
					if !in.IsDelim(']') {
						out.ExtKeyUsage = make([]x509.ExtKeyUsage, 0, 8)
					} else {
						out.ExtKeyUsage = []x509.ExtKeyUsage{}
					}
				} else {
					out.ExtKeyUsage = (out.ExtKeyUsage)[:0]
				}
				for !in.IsDelim(']') {
					var v58 x509.ExtKeyUsage
					v58 = x509.ExtKeyUsage(in.Int())
					out.ExtKeyUsage = append(out.ExtKeyUsage, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "UnknownExtKeyUsage":
			if in.IsNull() {
				in.Skip()
				out.UnknownExtKeyUsage = nil
			} else {
				in.Delim('[')
				if out.UnknownExtKeyUsage == nil {
					if !in.IsDelim(']') {
						out.UnknownExtKeyUsage = make([]asn1.ObjectIdentifier, 0, 2)
					} else {
						out.UnknownExtKeyUsage = []asn1.ObjectIdentifier{}
					}
				} else {
					out.UnknownExtKeyUsage = (out.UnknownExtKeyUsage)[:0]
				}
				for !in.IsDelim(']') {
					var v59 asn1.ObjectIdentifier
					if in.IsNull() {
						in.Skip()
						v59 = nil
					} else {
						in.Delim('[')
						if v59 == nil {
							if !in.IsDelim(']') {
								v59 = make(asn1.ObjectIdentifier, 0, 8)
							} else {
								v59 = asn1.ObjectIdentifier{}
							}
						} else {
							v59 = (v59)[:0]
						}
						for !in.IsDelim(']') {
							var v60 int
							v60 = int(in.Int())
							v59 = append(v59, v60)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.UnknownExtKeyUsage = append(out.UnknownExtKeyUsage, v59)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "BasicConstraintsValid":
			out.BasicConstraintsValid = bool(in.Bool())
		case "IsCA":
			out.IsCA = bool(in.Bool())
		case "MaxPathLen":
			out.MaxPathLen = int(in.Int())
		case "MaxPathLenZero":
			out.MaxPathLenZero = bool(in.Bool())
		case "SubjectKeyId":
			if in.IsNull() {
				in.Skip()
				out.SubjectKeyId = nil
			} else {
				out.SubjectKeyId = in.Bytes()
			}
		case "AuthorityKeyId":
			if in.IsNull() {
				in.Skip()
				out.AuthorityKeyId = nil
			} else {
				out.AuthorityKeyId = in.Bytes()
			}
		case "OCSPServer":
			if in.IsNull() {
				in.Skip()
				out.OCSPServer = nil
			} else {
				in.Delim('[')
				if out.OCSPServer == nil {
					if !in.IsDelim(']') {
						out.OCSPServer = make([]string, 0, 4)
					} else {
						out.OCSPServer = []string{}
					}
				} else {
					out.OCSPServer = (out.OCSPServer)[:0]
				}
				for !in.IsDelim(']') {
					var v63 string
					v63 = string(in.String())
					out.OCSPServer = append(out.OCSPServer, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "IssuingCertificateURL":
			if in.IsNull() {
				in.Skip()
				out.IssuingCertificateURL = nil
			} else {
				in.Delim('[')
				if out.IssuingCertificateURL == nil {
					if !in.IsDelim(']') {
						out.IssuingCertificateURL = make([]string, 0, 4)
					} else {
						out.IssuingCertificateURL = []string{}
					}
				} else {
					out.IssuingCertificateURL = (out.IssuingCertificateURL)[:0]
				}
				for !in.IsDelim(']') {
					var v64 string
					v64 = string(in.String())
					out.IssuingCertificateURL = append(out.IssuingCertificateURL, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DNSNames":
			if in.IsNull() {
				in.Skip()
				out.DNSNames = nil
			} else {
				in.Delim('[')
				if out.DNSNames == nil {
					if !in.IsDelim(']') {
						out.DNSNames = make([]string, 0, 4)
					} else {
						out.DNSNames = []string{}
					}
				} else {
					out.DNSNames = (out.DNSNames)[:0]
				}
				for !in.IsDelim(']') {
					var v65 string
					v65 = string(in.String())
					out.DNSNames = append(out.DNSNames, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "EmailAddresses":
			if in.IsNull() {
				in.Skip()
				out.EmailAddresses = nil
			} else {
				in.Delim('[')
				if out.EmailAddresses == nil {
					if !in.IsDelim(']') {
						out.EmailAddresses = make([]string, 0, 4)
					} else {
						out.EmailAddresses = []string{}
					}
				} else {
					out.EmailAddresses = (out.EmailAddresses)[:0]
				}
				for !in.IsDelim(']') {
					var v66 string
					v66 = string(in.String())
					out.EmailAddresses = append(out.EmailAddresses, v66)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "IPAddresses":
			if in.IsNull() {
				in.Skip()
				out.IPAddresses = nil
			} else {
				in.Delim('[')
				if out.IPAddresses == nil {
					if !in.IsDelim(']') {
						out.IPAddresses = make([]net.IP, 0, 2)
					} else {
						out.IPAddresses = []net.IP{}
					}
				} else {
					out.IPAddresses = (out.IPAddresses)[:0]
				}
				for !in.IsDelim(']') {
					var v67 net.IP
					if data := in.UnsafeBytes(); in.Ok() {
						in.AddError((v67).UnmarshalText(data))
					}
					out.IPAddresses = append(out.IPAddresses, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "URIs":
			if in.IsNull() {
				in.Skip()
				out.URIs = nil
			} else {
				in.Delim('[')
				if out.URIs == nil {
					if !in.IsDelim(']') {
						out.URIs = make([]*url.URL, 0, 8)
					} else {
						out.URIs = []*url.URL{}
					}
				} else {
					out.URIs = (out.URIs)[:0]
				}
				for !in.IsDelim(']') {
					var v68 *url.URL
					if in.IsNull() {
						in.Skip()
						v68 = nil
					} else {
						if v68 == nil {
							v68 = new(url.URL)
						}
						easyjsonBc289ab0DecodeNetUrl(in, v68)
					}
					out.URIs = append(out.URIs, v68)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PermittedDNSDomainsCritical":
			out.PermittedDNSDomainsCritical = bool(in.Bool())
		case "PermittedDNSDomains":
			if in.IsNull() {
				in.Skip()
				out.PermittedDNSDomains = nil
			} else {
				in.Delim('[')
				if out.PermittedDNSDomains == nil {
					if !in.IsDelim(']') {
						out.PermittedDNSDomains = make([]string, 0, 4)
					} else {
						out.PermittedDNSDomains = []string{}
					}
				} else {
					out.PermittedDNSDomains = (out.PermittedDNSDomains)[:0]
				}
				for !in.IsDelim(']') {
					var v69 string
					v69 = string(in.String())
					out.PermittedDNSDomains = append(out.PermittedDNSDomains, v69)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExcludedDNSDomains":
			if in.IsNull() {
				in.Skip()
				out.ExcludedDNSDomains = nil
			} else {
				in.Delim('[')
				if out.ExcludedDNSDomains == nil {
					if !in.IsDelim(']') {
						out.ExcludedDNSDomains = make([]string, 0, 4)
					} else {
						out.ExcludedDNSDomains = []string{}
					}
				} else {
					out.ExcludedDNSDomains = (out.ExcludedDNSDomains)[:0]
				}
				for !in.IsDelim(']') {
					var v70 string
					v70 = string(in.String())
					out.ExcludedDNSDomains = append(out.ExcludedDNSDomains, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PermittedIPRanges":
			if in.IsNull() {
				in.Skip()
				out.PermittedIPRanges = nil
			} else {
				in.Delim('[')
				if out.PermittedIPRanges == nil {
					if !in.IsDelim(']') {
						out.PermittedIPRanges = make([]*net.IPNet, 0, 8)
					} else {
						out.PermittedIPRanges = []*net.IPNet{}
					}
				} else {
					out.PermittedIPRanges = (out.PermittedIPRanges)[:0]
				}
				for !in.IsDelim(']') {
					var v71 *net.IPNet
					if in.IsNull() {
						in.Skip()
						v71 = nil
					} else {
						if v71 == nil {
							v71 = new(net.IPNet)
						}
						easyjsonBc289ab0DecodeNet(in, v71)
					}
					out.PermittedIPRanges = append(out.PermittedIPRanges, v71)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExcludedIPRanges":
			if in.IsNull() {
				in.Skip()
				out.ExcludedIPRanges = nil
			} else {
				in.Delim('[')
				if out.ExcludedIPRanges == nil {
					if !in.IsDelim(']') {
						out.ExcludedIPRanges = make([]*net.IPNet, 0, 8)
					} else {
						out.ExcludedIPRanges = []*net.IPNet{}
					}
				} else {
					out.ExcludedIPRanges = (out.ExcludedIPRanges)[:0]
				}
				for !in.IsDelim(']') {
					var v72 *net.IPNet
					if in.IsNull() {
						in.Skip()
						v72 = nil
					} else {
						if v72 == nil {
							v72 = new(net.IPNet)
						}
						easyjsonBc289ab0DecodeNet(in, v72)
					}
					out.ExcludedIPRanges = append(out.ExcludedIPRanges, v72)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PermittedEmailAddresses":
			if in.IsNull() {
				in.Skip()
				out.PermittedEmailAddresses = nil
			} else {
				in.Delim('[')
				if out.PermittedEmailAddresses == nil {
					if !in.IsDelim(']') {
						out.PermittedEmailAddresses = make([]string, 0, 4)
					} else {
						out.PermittedEmailAddresses = []string{}
					}
				} else {
					out.PermittedEmailAddresses = (out.PermittedEmailAddresses)[:0]
				}
				for !in.IsDelim(']') {
					var v73 string
					v73 = string(in.String())
					out.PermittedEmailAddresses = append(out.PermittedEmailAddresses, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExcludedEmailAddresses":
			if in.IsNull() {
				in.Skip()
				out.ExcludedEmailAddresses = nil
			} else {
				in.Delim('[')
				if out.ExcludedEmailAddresses == nil {
					if !in.IsDelim(']') {
						out.ExcludedEmailAddresses = make([]string, 0, 4)
					} else {
						out.ExcludedEmailAddresses = []string{}
					}
				} else {
					out.ExcludedEmailAddresses = (out.ExcludedEmailAddresses)[:0]
				}
				for !in.IsDelim(']') {
					var v74 string
					v74 = string(in.String())
					out.ExcludedEmailAddresses = append(out.ExcludedEmailAddresses, v74)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PermittedURIDomains":
			if in.IsNull() {
				in.Skip()
				out.PermittedURIDomains = nil
			} else {
				in.Delim('[')
				if out.PermittedURIDomains == nil {
					if !in.IsDelim(']') {
						out.PermittedURIDomains = make([]string, 0, 4)
					} else {
						out.PermittedURIDomains = []string{}
					}
				} else {
					out.PermittedURIDomains = (out.PermittedURIDomains)[:0]
				}
				for !in.IsDelim(']') {
					var v75 string
					v75 = string(in.String())
					out.PermittedURIDomains = append(out.PermittedURIDomains, v75)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExcludedURIDomains":
			if in.IsNull() {
				in.Skip()
				out.ExcludedURIDomains = nil
			} else {
				in.Delim('[')
				if out.ExcludedURIDomains == nil {
					if !in.IsDelim(']') {
						out.ExcludedURIDomains = make([]string, 0, 4)
					} else {
						out.ExcludedURIDomains = []string{}
					}
				} else {
					out.ExcludedURIDomains = (out.ExcludedURIDomains)[:0]
				}
				for !in.IsDelim(']') {
					var v76 string
					v76 = string(in.String())
					out.ExcludedURIDomains = append(out.ExcludedURIDomains, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CRLDistributionPoints":
			if in.IsNull() {
				in.Skip()
				out.CRLDistributionPoints = nil
			} else {
				in.Delim('[')
				if out.CRLDistributionPoints == nil {
					if !in.IsDelim(']') {
						out.CRLDistributionPoints = make([]string, 0, 4)
					} else {
						out.CRLDistributionPoints = []string{}
					}
				} else {
					out.CRLDistributionPoints = (out.CRLDistributionPoints)[:0]
				}
				for !in.IsDelim(']') {
					var v77 string
					v77 = string(in.String())
					out.CRLDistributionPoints = append(out.CRLDistributionPoints, v77)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PolicyIdentifiers":
			if in.IsNull() {
				in.Skip()
				out.PolicyIdentifiers = nil
			} else {
				in.Delim('[')
				if out.PolicyIdentifiers == nil {
					if !in.IsDelim(']') {
						out.PolicyIdentifiers = make([]asn1.ObjectIdentifier, 0, 2)
					} else {
						out.PolicyIdentifiers = []asn1.ObjectIdentifier{}
					}
				} else {
					out.PolicyIdentifiers = (out.PolicyIdentifiers)[:0]
				}
				for !in.IsDelim(']') {
					var v78 asn1.ObjectIdentifier
					if in.IsNull() {
						in.Skip()
						v78 = nil
					} else {
						in.Delim('[')
						if v78 == nil {
							if !in.IsDelim(']') {
								v78 = make(asn1.ObjectIdentifier, 0, 8)
							} else {
								v78 = asn1.ObjectIdentifier{}
							}
						} else {
							v78 = (v78)[:0]
						}
						for !in.IsDelim(']') {
							var v79 int
							v79 = int(in.Int())
							v78 = append(v78, v79)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.PolicyIdentifiers = append(out.PolicyIdentifiers, v78)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeCryptoX509(out *jwriter.Writer, in x509.Certificate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Raw\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.Raw)
	}
	{
		const prefix string = ",\"RawTBSCertificate\":"
		out.RawString(prefix)
		out.Base64Bytes(in.RawTBSCertificate)
	}
	{
		const prefix string = ",\"RawSubjectPublicKeyInfo\":"
		out.RawString(prefix)
		out.Base64Bytes(in.RawSubjectPublicKeyInfo)
	}
	{
		const prefix string = ",\"RawSubject\":"
		out.RawString(prefix)
		out.Base64Bytes(in.RawSubject)
	}
	{
		const prefix string = ",\"RawIssuer\":"
		out.RawString(prefix)
		out.Base64Bytes(in.RawIssuer)
	}
	{
		const prefix string = ",\"Signature\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Signature)
	}
	{
		const prefix string = ",\"SignatureAlgorithm\":"
		out.RawString(prefix)
		out.Int(int(in.SignatureAlgorithm))
	}
	{
		const prefix string = ",\"PublicKeyAlgorithm\":"
		out.RawString(prefix)
		out.Int(int(in.PublicKeyAlgorithm))
	}
	{
		const prefix string = ",\"PublicKey\":"
		out.RawString(prefix)
		if m, ok := in.PublicKey.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.PublicKey.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.PublicKey))
		}
	}
	{
		const prefix string = ",\"Version\":"
		out.RawString(prefix)
		out.Int(int(in.Version))
	}
	{
		const prefix string = ",\"SerialNumber\":"
		out.RawString(prefix)
		if in.SerialNumber == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.SerialNumber).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"Issuer\":"
		out.RawString(prefix)
		easyjsonBc289ab0EncodeCryptoX509Pkix(out, in.Issuer)
	}
	{
		const prefix string = ",\"Subject\":"
		out.RawString(prefix)
		easyjsonBc289ab0EncodeCryptoX509Pkix(out, in.Subject)
	}
	{
		const prefix string = ",\"NotBefore\":"
		out.RawString(prefix)
		out.Raw((in.NotBefore).MarshalJSON())
	}
	{
		const prefix string = ",\"NotAfter\":"
		out.RawString(prefix)
		out.Raw((in.NotAfter).MarshalJSON())
	}
	{
		const prefix string = ",\"KeyUsage\":"
		out.RawString(prefix)
		out.Int(int(in.KeyUsage))
	}
	{
		const prefix string = ",\"Extensions\":"
		out.RawString(prefix)
		if in.Extensions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v92, v93 := range in.Extensions {
				if v92 > 0 {
					out.RawByte(',')
				}
				easyjsonBc289ab0EncodeCryptoX509Pkix1(out, v93)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ExtraExtensions\":"
		out.RawString(prefix)
		if in.ExtraExtensions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v94, v95 := range in.ExtraExtensions {
				if v94 > 0 {
					out.RawByte(',')
				}
				easyjsonBc289ab0EncodeCryptoX509Pkix1(out, v95)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"UnhandledCriticalExtensions\":"
		out.RawString(prefix)
		if in.UnhandledCriticalExtensions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v96, v97 := range in.UnhandledCriticalExtensions {
				if v96 > 0 {
					out.RawByte(',')
				}
				if v97 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v98, v99 := range v97 {
						if v98 > 0 {
							out.RawByte(',')
						}
						out.Int(int(v99))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ExtKeyUsage\":"
		out.RawString(prefix)
		if in.ExtKeyUsage == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v100, v101 := range in.ExtKeyUsage {
				if v100 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v101))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"UnknownExtKeyUsage\":"
		out.RawString(prefix)
		if in.UnknownExtKeyUsage == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v102, v103 := range in.UnknownExtKeyUsage {
				if v102 > 0 {
					out.RawByte(',')
				}
				if v103 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v104, v105 := range v103 {
						if v104 > 0 {
							out.RawByte(',')
						}
						out.Int(int(v105))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"BasicConstraintsValid\":"
		out.RawString(prefix)
		out.Bool(bool(in.BasicConstraintsValid))
	}
	{
		const prefix string = ",\"IsCA\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCA))
	}
	{
		const prefix string = ",\"MaxPathLen\":"
		out.RawString(prefix)
		out.Int(int(in.MaxPathLen))
	}
	{
		const prefix string = ",\"MaxPathLenZero\":"
		out.RawString(prefix)
		out.Bool(bool(in.MaxPathLenZero))
	}
	{
		const prefix string = ",\"SubjectKeyId\":"
		out.RawString(prefix)
		out.Base64Bytes(in.SubjectKeyId)
	}
	{
		const prefix string = ",\"AuthorityKeyId\":"
		out.RawString(prefix)
		out.Base64Bytes(in.AuthorityKeyId)
	}
	{
		const prefix string = ",\"OCSPServer\":"
		out.RawString(prefix)
		if in.OCSPServer == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v110, v111 := range in.OCSPServer {
				if v110 > 0 {
					out.RawByte(',')
				}
				out.String(string(v111))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"IssuingCertificateURL\":"
		out.RawString(prefix)
		if in.IssuingCertificateURL == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v112, v113 := range in.IssuingCertificateURL {
				if v112 > 0 {
					out.RawByte(',')
				}
				out.String(string(v113))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"DNSNames\":"
		out.RawString(prefix)
		if in.DNSNames == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v114, v115 := range in.DNSNames {
				if v114 > 0 {
					out.RawByte(',')
				}
				out.String(string(v115))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"EmailAddresses\":"
		out.RawString(prefix)
		if in.EmailAddresses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v116, v117 := range in.EmailAddresses {
				if v116 > 0 {
					out.RawByte(',')
				}
				out.String(string(v117))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"IPAddresses\":"
		out.RawString(prefix)
		if in.IPAddresses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v118, v119 := range in.IPAddresses {
				if v118 > 0 {
					out.RawByte(',')
				}
				out.RawText((v119).MarshalText())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"URIs\":"
		out.RawString(prefix)
		if in.URIs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v120, v121 := range in.URIs {
				if v120 > 0 {
					out.RawByte(',')
				}
				if v121 == nil {
					out.RawString("null")
				} else {
					easyjsonBc289ab0EncodeNetUrl(out, *v121)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"PermittedDNSDomainsCritical\":"
		out.RawString(prefix)
		out.Bool(bool(in.PermittedDNSDomainsCritical))
	}
	{
		const prefix string = ",\"PermittedDNSDomains\":"
		out.RawString(prefix)
		if in.PermittedDNSDomains == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v122, v123 := range in.PermittedDNSDomains {
				if v122 > 0 {
					out.RawByte(',')
				}
				out.String(string(v123))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ExcludedDNSDomains\":"
		out.RawString(prefix)
		if in.ExcludedDNSDomains == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v124, v125 := range in.ExcludedDNSDomains {
				if v124 > 0 {
					out.RawByte(',')
				}
				out.String(string(v125))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"PermittedIPRanges\":"
		out.RawString(prefix)
		if in.PermittedIPRanges == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v126, v127 := range in.PermittedIPRanges {
				if v126 > 0 {
					out.RawByte(',')
				}
				if v127 == nil {
					out.RawString("null")
				} else {
					easyjsonBc289ab0EncodeNet(out, *v127)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ExcludedIPRanges\":"
		out.RawString(prefix)
		if in.ExcludedIPRanges == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v128, v129 := range in.ExcludedIPRanges {
				if v128 > 0 {
					out.RawByte(',')
				}
				if v129 == nil {
					out.RawString("null")
				} else {
					easyjsonBc289ab0EncodeNet(out, *v129)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"PermittedEmailAddresses\":"
		out.RawString(prefix)
		if in.PermittedEmailAddresses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v130, v131 := range in.PermittedEmailAddresses {
				if v130 > 0 {
					out.RawByte(',')
				}
				out.String(string(v131))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ExcludedEmailAddresses\":"
		out.RawString(prefix)
		if in.ExcludedEmailAddresses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v132, v133 := range in.ExcludedEmailAddresses {
				if v132 > 0 {
					out.RawByte(',')
				}
				out.String(string(v133))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"PermittedURIDomains\":"
		out.RawString(prefix)
		if in.PermittedURIDomains == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v134, v135 := range in.PermittedURIDomains {
				if v134 > 0 {
					out.RawByte(',')
				}
				out.String(string(v135))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ExcludedURIDomains\":"
		out.RawString(prefix)
		if in.ExcludedURIDomains == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v136, v137 := range in.ExcludedURIDomains {
				if v136 > 0 {
					out.RawByte(',')
				}
				out.String(string(v137))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"CRLDistributionPoints\":"
		out.RawString(prefix)
		if in.CRLDistributionPoints == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v138, v139 := range in.CRLDistributionPoints {
				if v138 > 0 {
					out.RawByte(',')
				}
				out.String(string(v139))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"PolicyIdentifiers\":"
		out.RawString(prefix)
		if in.PolicyIdentifiers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v140, v141 := range in.PolicyIdentifiers {
				if v140 > 0 {
					out.RawByte(',')
				}
				if v141 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v142, v143 := range v141 {
						if v142 > 0 {
							out.RawByte(',')
						}
						out.Int(int(v143))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeNet(in *jlexer.Lexer, out *net.IPNet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IP":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.IP).UnmarshalText(data))
			}
		case "Mask":
			if in.IsNull() {
				in.Skip()
				out.Mask = nil
			} else {
				out.Mask = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeNet(out *jwriter.Writer, in net.IPNet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"IP\":"
		out.RawString(prefix[1:])
		out.RawText((in.IP).MarshalText())
	}
	{
		const prefix string = ",\"Mask\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Mask)
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeCryptoX509Pkix1(in *jlexer.Lexer, out *pkix.Extension) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Id":
			if in.IsNull() {
				in.Skip()
				out.Id = nil
			} else {
				in.Delim('[')
				if out.Id == nil {
					if !in.IsDelim(']') {
						out.Id = make(asn1.ObjectIdentifier, 0, 8)
					} else {
						out.Id = asn1.ObjectIdentifier{}
					}
				} else {
					out.Id = (out.Id)[:0]
				}
				for !in.IsDelim(']') {
					var v147 int
					v147 = int(in.Int())
					out.Id = append(out.Id, v147)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Critical":
			out.Critical = bool(in.Bool())
		case "Value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				out.Value = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeCryptoX509Pkix1(out *jwriter.Writer, in pkix.Extension) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Id\":"
		out.RawString(prefix[1:])
		if in.Id == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v149, v150 := range in.Id {
				if v149 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v150))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Critical\":"
		out.RawString(prefix)
		out.Bool(bool(in.Critical))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Value)
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeCryptoX509Pkix(in *jlexer.Lexer, out *pkix.Name) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Country":
			if in.IsNull() {
				in.Skip()
				out.Country = nil
			} else {
				in.Delim('[')
				if out.Country == nil {
					if !in.IsDelim(']') {
						out.Country = make([]string, 0, 4)
					} else {
						out.Country = []string{}
					}
				} else {
					out.Country = (out.Country)[:0]
				}
				for !in.IsDelim(']') {
					var v153 string
					v153 = string(in.String())
					out.Country = append(out.Country, v153)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Organization":
			if in.IsNull() {
				in.Skip()
				out.Organization = nil
			} else {
				in.Delim('[')
				if out.Organization == nil {
					if !in.IsDelim(']') {
						out.Organization = make([]string, 0, 4)
					} else {
						out.Organization = []string{}
					}
				} else {
					out.Organization = (out.Organization)[:0]
				}
				for !in.IsDelim(']') {
					var v154 string
					v154 = string(in.String())
					out.Organization = append(out.Organization, v154)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "OrganizationalUnit":
			if in.IsNull() {
				in.Skip()
				out.OrganizationalUnit = nil
			} else {
				in.Delim('[')
				if out.OrganizationalUnit == nil {
					if !in.IsDelim(']') {
						out.OrganizationalUnit = make([]string, 0, 4)
					} else {
						out.OrganizationalUnit = []string{}
					}
				} else {
					out.OrganizationalUnit = (out.OrganizationalUnit)[:0]
				}
				for !in.IsDelim(']') {
					var v155 string
					v155 = string(in.String())
					out.OrganizationalUnit = append(out.OrganizationalUnit, v155)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Locality":
			if in.IsNull() {
				in.Skip()
				out.Locality = nil
			} else {
				in.Delim('[')
				if out.Locality == nil {
					if !in.IsDelim(']') {
						out.Locality = make([]string, 0, 4)
					} else {
						out.Locality = []string{}
					}
				} else {
					out.Locality = (out.Locality)[:0]
				}
				for !in.IsDelim(']') {
					var v156 string
					v156 = string(in.String())
					out.Locality = append(out.Locality, v156)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Province":
			if in.IsNull() {
				in.Skip()
				out.Province = nil
			} else {
				in.Delim('[')
				if out.Province == nil {
					if !in.IsDelim(']') {
						out.Province = make([]string, 0, 4)
					} else {
						out.Province = []string{}
					}
				} else {
					out.Province = (out.Province)[:0]
				}
				for !in.IsDelim(']') {
					var v157 string
					v157 = string(in.String())
					out.Province = append(out.Province, v157)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "StreetAddress":
			if in.IsNull() {
				in.Skip()
				out.StreetAddress = nil
			} else {
				in.Delim('[')
				if out.StreetAddress == nil {
					if !in.IsDelim(']') {
						out.StreetAddress = make([]string, 0, 4)
					} else {
						out.StreetAddress = []string{}
					}
				} else {
					out.StreetAddress = (out.StreetAddress)[:0]
				}
				for !in.IsDelim(']') {
					var v158 string
					v158 = string(in.String())
					out.StreetAddress = append(out.StreetAddress, v158)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "PostalCode":
			if in.IsNull() {
				in.Skip()
				out.PostalCode = nil
			} else {
				in.Delim('[')
				if out.PostalCode == nil {
					if !in.IsDelim(']') {
						out.PostalCode = make([]string, 0, 4)
					} else {
						out.PostalCode = []string{}
					}
				} else {
					out.PostalCode = (out.PostalCode)[:0]
				}
				for !in.IsDelim(']') {
					var v159 string
					v159 = string(in.String())
					out.PostalCode = append(out.PostalCode, v159)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SerialNumber":
			out.SerialNumber = string(in.String())
		case "CommonName":
			out.CommonName = string(in.String())
		case "Names":
			if in.IsNull() {
				in.Skip()
				out.Names = nil
			} else {
				in.Delim('[')
				if out.Names == nil {
					if !in.IsDelim(']') {
						out.Names = make([]pkix.AttributeTypeAndValue, 0, 1)
					} else {
						out.Names = []pkix.AttributeTypeAndValue{}
					}
				} else {
					out.Names = (out.Names)[:0]
				}
				for !in.IsDelim(']') {
					var v160 pkix.AttributeTypeAndValue
					easyjsonBc289ab0DecodeCryptoX509Pkix2(in, &v160)
					out.Names = append(out.Names, v160)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ExtraNames":
			if in.IsNull() {
				in.Skip()
				out.ExtraNames = nil
			} else {
				in.Delim('[')
				if out.ExtraNames == nil {
					if !in.IsDelim(']') {
						out.ExtraNames = make([]pkix.AttributeTypeAndValue, 0, 1)
					} else {
						out.ExtraNames = []pkix.AttributeTypeAndValue{}
					}
				} else {
					out.ExtraNames = (out.ExtraNames)[:0]
				}
				for !in.IsDelim(']') {
					var v161 pkix.AttributeTypeAndValue
					easyjsonBc289ab0DecodeCryptoX509Pkix2(in, &v161)
					out.ExtraNames = append(out.ExtraNames, v161)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeCryptoX509Pkix(out *jwriter.Writer, in pkix.Name) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Country\":"
		out.RawString(prefix[1:])
		if in.Country == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v162, v163 := range in.Country {
				if v162 > 0 {
					out.RawByte(',')
				}
				out.String(string(v163))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Organization\":"
		out.RawString(prefix)
		if in.Organization == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v164, v165 := range in.Organization {
				if v164 > 0 {
					out.RawByte(',')
				}
				out.String(string(v165))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"OrganizationalUnit\":"
		out.RawString(prefix)
		if in.OrganizationalUnit == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v166, v167 := range in.OrganizationalUnit {
				if v166 > 0 {
					out.RawByte(',')
				}
				out.String(string(v167))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Locality\":"
		out.RawString(prefix)
		if in.Locality == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v168, v169 := range in.Locality {
				if v168 > 0 {
					out.RawByte(',')
				}
				out.String(string(v169))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Province\":"
		out.RawString(prefix)
		if in.Province == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v170, v171 := range in.Province {
				if v170 > 0 {
					out.RawByte(',')
				}
				out.String(string(v171))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"StreetAddress\":"
		out.RawString(prefix)
		if in.StreetAddress == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v172, v173 := range in.StreetAddress {
				if v172 > 0 {
					out.RawByte(',')
				}
				out.String(string(v173))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"PostalCode\":"
		out.RawString(prefix)
		if in.PostalCode == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v174, v175 := range in.PostalCode {
				if v174 > 0 {
					out.RawByte(',')
				}
				out.String(string(v175))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SerialNumber\":"
		out.RawString(prefix)
		out.String(string(in.SerialNumber))
	}
	{
		const prefix string = ",\"CommonName\":"
		out.RawString(prefix)
		out.String(string(in.CommonName))
	}
	{
		const prefix string = ",\"Names\":"
		out.RawString(prefix)
		if in.Names == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v176, v177 := range in.Names {
				if v176 > 0 {
					out.RawByte(',')
				}
				easyjsonBc289ab0EncodeCryptoX509Pkix2(out, v177)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ExtraNames\":"
		out.RawString(prefix)
		if in.ExtraNames == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v178, v179 := range in.ExtraNames {
				if v178 > 0 {
					out.RawByte(',')
				}
				easyjsonBc289ab0EncodeCryptoX509Pkix2(out, v179)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeCryptoX509Pkix2(in *jlexer.Lexer, out *pkix.AttributeTypeAndValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				in.Delim('[')
				if out.Type == nil {
					if !in.IsDelim(']') {
						out.Type = make(asn1.ObjectIdentifier, 0, 8)
					} else {
						out.Type = asn1.ObjectIdentifier{}
					}
				} else {
					out.Type = (out.Type)[:0]
				}
				for !in.IsDelim(']') {
					var v180 int
					v180 = int(in.Int())
					out.Type = append(out.Type, v180)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Value":
			if m, ok := out.Value.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Value.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Value = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeCryptoX509Pkix2(out *jwriter.Writer, in pkix.AttributeTypeAndValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		if in.Type == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v181, v182 := range in.Type {
				if v181 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v182))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		if m, ok := in.Value.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Value.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Value))
		}
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeMimeMultipart(in *jlexer.Lexer, out *multipart.Form) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Value":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Value = make(map[string][]string)
				} else {
					out.Value = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v183 []string
					if in.IsNull() {
						in.Skip()
						v183 = nil
					} else {
						in.Delim('[')
						if v183 == nil {
							if !in.IsDelim(']') {
								v183 = make([]string, 0, 4)
							} else {
								v183 = []string{}
							}
						} else {
							v183 = (v183)[:0]
						}
						for !in.IsDelim(']') {
							var v184 string
							v184 = string(in.String())
							v183 = append(v183, v184)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Value)[key] = v183
					in.WantComma()
				}
				in.Delim('}')
			}
		case "File":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.File = make(map[string][]*multipart.FileHeader)
				} else {
					out.File = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v185 []*multipart.FileHeader
					if in.IsNull() {
						in.Skip()
						v185 = nil
					} else {
						in.Delim('[')
						if v185 == nil {
							if !in.IsDelim(']') {
								v185 = make([]*multipart.FileHeader, 0, 8)
							} else {
								v185 = []*multipart.FileHeader{}
							}
						} else {
							v185 = (v185)[:0]
						}
						for !in.IsDelim(']') {
							var v186 *multipart.FileHeader
							if in.IsNull() {
								in.Skip()
								v186 = nil
							} else {
								if v186 == nil {
									v186 = new(multipart.FileHeader)
								}
								easyjsonBc289ab0DecodeMimeMultipart1(in, v186)
							}
							v185 = append(v185, v186)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.File)[key] = v185
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeMimeMultipart(out *jwriter.Writer, in multipart.Form) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix[1:])
		if in.Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v187First := true
			for v187Name, v187Value := range in.Value {
				if v187First {
					v187First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v187Name))
				out.RawByte(':')
				if v187Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v188, v189 := range v187Value {
						if v188 > 0 {
							out.RawByte(',')
						}
						out.String(string(v189))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"File\":"
		out.RawString(prefix)
		if in.File == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v190First := true
			for v190Name, v190Value := range in.File {
				if v190First {
					v190First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v190Name))
				out.RawByte(':')
				if v190Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v191, v192 := range v190Value {
						if v191 > 0 {
							out.RawByte(',')
						}
						if v192 == nil {
							out.RawString("null")
						} else {
							easyjsonBc289ab0EncodeMimeMultipart1(out, *v192)
						}
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeMimeMultipart1(in *jlexer.Lexer, out *multipart.FileHeader) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Filename":
			out.Filename = string(in.String())
		case "Header":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Header = make(textproto.MIMEHeader)
				} else {
					out.Header = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v193 []string
					if in.IsNull() {
						in.Skip()
						v193 = nil
					} else {
						in.Delim('[')
						if v193 == nil {
							if !in.IsDelim(']') {
								v193 = make([]string, 0, 4)
							} else {
								v193 = []string{}
							}
						} else {
							v193 = (v193)[:0]
						}
						for !in.IsDelim(']') {
							var v194 string
							v194 = string(in.String())
							v193 = append(v193, v194)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Header)[key] = v193
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Size":
			out.Size = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeMimeMultipart1(out *jwriter.Writer, in multipart.FileHeader) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Filename\":"
		out.RawString(prefix[1:])
		out.String(string(in.Filename))
	}
	{
		const prefix string = ",\"Header\":"
		out.RawString(prefix)
		if in.Header == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v195First := true
			for v195Name, v195Value := range in.Header {
				if v195First {
					v195First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v195Name))
				out.RawByte(':')
				if v195Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v196, v197 := range v195Value {
						if v196 > 0 {
							out.RawByte(',')
						}
						out.String(string(v197))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeNetUrl(in *jlexer.Lexer, out *url.URL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Scheme":
			out.Scheme = string(in.String())
		case "Opaque":
			out.Opaque = string(in.String())
		case "User":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(url.Userinfo)
				}
				easyjsonBc289ab0DecodeNetUrl1(in, out.User)
			}
		case "Host":
			out.Host = string(in.String())
		case "Path":
			out.Path = string(in.String())
		case "RawPath":
			out.RawPath = string(in.String())
		case "ForceQuery":
			out.ForceQuery = bool(in.Bool())
		case "RawQuery":
			out.RawQuery = string(in.String())
		case "Fragment":
			out.Fragment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeNetUrl(out *jwriter.Writer, in url.URL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Scheme\":"
		out.RawString(prefix[1:])
		out.String(string(in.Scheme))
	}
	{
		const prefix string = ",\"Opaque\":"
		out.RawString(prefix)
		out.String(string(in.Opaque))
	}
	{
		const prefix string = ",\"User\":"
		out.RawString(prefix)
		if in.User == nil {
			out.RawString("null")
		} else {
			easyjsonBc289ab0EncodeNetUrl1(out, *in.User)
		}
	}
	{
		const prefix string = ",\"Host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"Path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"RawPath\":"
		out.RawString(prefix)
		out.String(string(in.RawPath))
	}
	{
		const prefix string = ",\"ForceQuery\":"
		out.RawString(prefix)
		out.Bool(bool(in.ForceQuery))
	}
	{
		const prefix string = ",\"RawQuery\":"
		out.RawString(prefix)
		out.String(string(in.RawQuery))
	}
	{
		const prefix string = ",\"Fragment\":"
		out.RawString(prefix)
		out.String(string(in.Fragment))
	}
	out.RawByte('}')
}
func easyjsonBc289ab0DecodeNetUrl1(in *jlexer.Lexer, out *url.Userinfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc289ab0EncodeNetUrl1(out *jwriter.Writer, in url.Userinfo) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
